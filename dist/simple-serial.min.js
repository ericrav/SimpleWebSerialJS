!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).SimpleSerial={})}(this,(function(e){"use strict";function t(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function i(e){if("number"==typeof e)return e;if("string"!=typeof e||isNaN(e)||isNaN(parseFloat(e))){if("object"==typeof e){let t={};return Object.keys(e).forEach((n=>{t[n]=i(e[n])})),t}return e}return parseFloat(e)}const n={baudRate:57600,requestButton:null,requestAccessOnPageLoad:!0,accessText:"To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.",accessButtonLabel:"Connect to Serial Port",styleDomElements:!0,transformer:new class{constructor(){this.chunks=""}transform(e,t){this.chunks+=e;const i=this.chunks.split("\r\n");this.chunks=i.pop(),i.forEach((e=>t.enqueue(e)))}flush(e){e.enqueue(this.chunks)}},logIncomingSerialData:!1,logOutgoingSerialData:!1,parseStringsAsNumbers:!0,warnAboutUnregisteredEvents:!0,newLineCharacter:"\n",filters:[]};class s{constructor(e){if(t(this,"configuration",void 0),t(this,"port",void 0),t(this,"writer",void 0),t(this,"modal",void 0),t(this,"_listeners",{}),t(this,"_this",this),!navigator.serial)throw new Error("The Serial API not supported in your browser. Make sure you've enabled flags if necessary!");return"number"==typeof e?e={...n,baudRate:e}:void 0===e?e=n:"object"==typeof e&&(e={...n,...e}),null!=e.requestButton&&(e={requestAccessOnPageLoad:!1,...e}),this.configuration=e,this.configuration.requestButton&&this.requestSerialAccessOnClick(this.configuration.requestButton),this.configuration.requestAccessOnPageLoad&&window.addEventListener("load",this.createModal.bind(this)),this}requestSerialAccessOnClick(e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw"Could not find element with ID '"+e+"'.";e=t}e.addEventListener("click",this.connect.bind(this))}createModal(){this.modal=document.createElement("div"),this.configuration.styleDomElements&&this.modal.setAttribute("style","position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000");const e=document.createElement("div");this.configuration.styleDomElements&&e.setAttribute("style","background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer"),e.classList.add("SimpleSerial-modal-overlay");const t=document.createElement("div");this.configuration.styleDomElements&&t.setAttribute("style","position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box; "),t.classList.add("SimpleSerial-modal-container");const i=document.createElement("div");this.configuration.styleDomElements&&i.setAttribute("style","background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);"),i.classList.add("SimpleSerial-modal-inner");const n=document.createElement("p");this.configuration.styleDomElements&&n.setAttribute("style","color: #000"),n.innerText=this.configuration.accessText;const s=document.createElement("button");return s.innerText=this.configuration.accessButtonLabel,this.requestSerialAccessOnClick(s),i.append(n,s),t.append(i),this.modal.append(e,t),document.body.append(this.modal),this.modal}removeModal(){this.modal.remove()}async connect(){this.port=await navigator.serial.requestPort({filters:this.configuration.filters}),await this.port.open({baudRate:this.configuration.baudRate}),this.configuration.requestAccessOnPageLoad&&this.removeModal();const e=new TextEncoderStream;e.readable.pipeTo(this.port.writable),this.writer=e.writable.getWriter();let t=new TextDecoderStream;this.port.readable.pipeTo(t.writable);const i=t.readable.pipeThrough(new TransformStream(this.configuration.transformer)).getReader();await this.readLoop(i)}on(e,t){return this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t),[e,t]}removeListener(e,t){if("object"==typeof e&&void 0===t&&(t=e[1],e=e[0]),!this._listeners[e])throw new Error("There is no listener named "+e+".");let i=this._listeners[e].length;return this._listeners[e]=this._listeners[e].filter((e=>e!==t)),i!==this._listeners[e].length}removeListeners(e){if("string"!=typeof e)throw new Error("removeListeners expects a string as parameter, which will be used to remove all listeners of that event.");const t=this._listeners[e].length;return this._listeners[e]=[],t>0}async send(e,t){if(void 0===t)return this.configuration.logOutgoingSerialData&&console.log(e),this.configuration.parseStringsAsNumbers&&(e=i(e)),this.sendData(e);this.configuration.parseStringsAsNumbers&&(t=i(t));const n=[e,t],s=JSON.stringify(n);return this.configuration.logOutgoingSerialData&&console.log(s),this.writer.write(s+this.configuration.newLineCharacter)}async sendEvent(e){return this.send("_e",e)}async sendData(e){return this.send("_d",e)}emit(e,t){if(this.configuration.warnAboutUnregisteredEvents&&!this._listeners[e])return console.warn("Event "+e+" has been received, but it has never been registered as listener.");this._listeners[e].forEach((e=>e(t)))}async readLoop(e){for(;;){const{value:t,done:i}=await e.read();if(t){let e=null;try{e=JSON.parse(t)}catch(e){}if(e)if(this.configuration.logIncomingSerialData&&console.log(e),"object"==typeof e){if("_w"===e[0]){console.warn("[ARDUINO] "+e[1]);continue}if("_l"===e[0]){console.log("[ARDUINO] "+e[1]);continue}if("_e"===e[0]){console.error("[ARDUINO] "+e[1]);continue}if("_d"===e[0]){this.emit("data",e[1]);continue}this.emit(e[0],e[1])}else"string"==typeof e&&this.emit(e,null);else this.configuration.logIncomingSerialData&&console.log(t)}if(i){console.log("[readLoop] DONE",i),e.releaseLock();break}}}}e.connect=function(e){return new s(e)}}));
//# sourceMappingURL=simple-serial.min.js.map
