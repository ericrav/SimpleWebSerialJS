!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).SimpleSerial={})}(this,(function(e){"use strict";function t(e){if("number"==typeof e)return e;if("string"!=typeof e||isNaN(e)||isNaN(parseFloat(e))){if("object"==typeof e){let n={};return Object.keys(e).forEach((o=>{n[o]=t(e[o])})),n}return e}return parseFloat(e)}const n={baudRate:57600,requestButton:null,requestAccessOnPageLoad:!0,accessText:"To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.",accessButtonLabel:"Connect to Serial Port",styleDomElements:!0,transformer:new class{constructor(){this.chunks=""}transform(e,t){this.chunks+=e;const n=this.chunks.split("\r\n");this.chunks=n.pop(),n.forEach((e=>t.enqueue(e)))}flush(e){e.enqueue(this.chunks)}},logIncomingSerialData:!1,logOutgoingSerialData:!1,parseStringsAsNumbers:!0,warnAboutUnregisteredEvents:!0,newLineCharacter:"\n",filters:[]};const o=function(e){if(!navigator.serial)throw new Error("The Serial API not supported in your browser. Make sure you've enabled flags if necessary!");"number"==typeof e?e={...n,baudRate:e}:void 0===e?e=n:"object"==typeof e&&(e={...n,...e}),null!=e.requestButton&&(e={requestAccessOnPageLoad:!1,...e});let o=e;const r={configuration:o,port:null,writer:null,modal:null,_listeners:{},_this:this,requestSerialAccessOnClick:function(e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw"Could not find element with ID '"+e+"'.";e=t}e.addEventListener("click",r.connect)},createModal(){r.modal=document.createElement("div"),r.configuration.styleDomElements&&r.modal.setAttribute("style","position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000");const e=document.createElement("div");r.configuration.styleDomElements&&e.setAttribute("style","background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer"),e.classList.add("SimpleSerial-modal-overlay");const t=document.createElement("div");r.configuration.styleDomElements&&t.setAttribute("style","position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box; "),t.classList.add("SimpleSerial-modal-container");const n=document.createElement("div");r.configuration.styleDomElements&&n.setAttribute("style","background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);"),n.classList.add("SimpleSerial-modal-inner");const o=document.createElement("p");r.configuration.styleDomElements&&o.setAttribute("style","color: #000"),o.innerText=r.configuration.accessText;const s=document.createElement("button");return s.innerText=r.configuration.accessButtonLabel,r.requestSerialAccessOnClick(s),n.append(o,s),t.append(n),r.modal.append(e,t),document.body.append(r.modal),r.modal},removeModal(){r.modal.remove()},connect:async function(){console.log("connect called"),r.port=await navigator.serial.requestPort({filters:r.configuration.filters}),await r.port.open({baudRate:r.configuration.baudRate}),r.configuration.requestAccessOnPageLoad&&r.removeModal();const e=new TextEncoderStream;e.readable.pipeTo(r.port.writable),r.writer=e.writable.getWriter();let t=new TextDecoderStream;r.port.readable.pipeTo(t.writable);const n=t.readable.pipeThrough(new TransformStream(r.configuration.transformer)).getReader();await r.readLoop(n)},on:(e,t)=>(r._listeners[e]||(r._listeners[e]=[]),r._listeners[e].push(t),[e,t]),removeListener(e,t){if("object"==typeof e&&void 0===t&&(t=e[1],e=e[0]),!r._listeners[e])throw new Error("There is no listener named "+e+".");let n=r._listeners[e].length;return r._listeners[e]=r._listeners[e].filter((e=>e!==t)),n!==r._listeners[e].length},removeListeners(e){if("string"!=typeof e)throw new Error("removeListeners expects a string as parameter, which will be used to remove all listeners of that event.");const t=r._listeners[e].length;return r._listeners[e]=[],t>0},async send(e,n){if(void 0===n)return r.configuration.logOutgoingSerialData&&console.log(e),r.configuration.parseStringsAsNumbers&&(e=t(e)),r.sendData(e);r.configuration.parseStringsAsNumbers&&(n=t(n));const o=[e,n],s=JSON.stringify(o);return r.configuration.logOutgoingSerialData&&console.log(s),r.writer.write(s+r.configuration.newLineCharacter)},sendEvent:async e=>r.send("_e",e),sendData:async e=>r.send("_d",e),emit(e,t){if(r.configuration.warnAboutUnregisteredEvents&&!r._listeners[e])return console.warn("Event "+e+" has been received, but it has never been registered as listener.");r._listeners[e].forEach((e=>e(t)))},async readLoop(e){for(;;){const{value:t,done:n}=await e.read();if(t){let e=null;try{e=JSON.parse(t)}catch(e){}if(e)if(r.configuration.logIncomingSerialData&&console.log(e),"object"==typeof e){if("_w"===e[0]){console.warn("[ARDUINO] "+e[1]);continue}if("_l"===e[0]){console.log("[ARDUINO] "+e[1]);continue}if("_e"===e[0]){console.error("[ARDUINO] "+e[1]);continue}if("_d"===e[0]){r.emit("data",e[1]);continue}r.emit(e[0],e[1])}else"string"==typeof e&&r.emit(e,null);else r.configuration.logIncomingSerialData&&console.log(t)}if(n){console.log("[readLoop] DONE",n),e.releaseLock();break}}}};return o.requestButton&&r.requestSerialAccessOnClick(o.requestButton),o.requestAccessOnPageLoad&&window.addEventListener("load",r.createModal()),r};e.connect=function(e){return o(e)}}));
//# sourceMappingURL=simple-serial.min.js.map
