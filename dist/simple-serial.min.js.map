{"version":3,"file":"simple-serial.min.js","sources":["../src/SimpleSerial.js"],"sourcesContent":["'use strict';\r\n\r\nconst DEFAULT_BAUDRATE = 57600;\r\n\r\n// Simple TransformStream used to chop incoming serial data up when a new line character appears.\r\nclass LineBreakTransformer {\r\n    constructor() {\r\n        this.chunks = \"\";\r\n    }\r\n\r\n    transform(chunk, controller) {\r\n        this.chunks += chunk;\r\n        const lines = this.chunks.split(\"\\r\\n\");\r\n        this.chunks = lines.pop();\r\n        lines.forEach((line) => controller.enqueue(line));\r\n    }\r\n\r\n    flush(controller) {\r\n        controller.enqueue(this.chunks);\r\n    }\r\n}\r\n\r\nfunction parseAsNumber(value) {\r\n    if (typeof value == \"number\") {\r\n        return value;\r\n    } else if (typeof value == \"string\" && !isNaN(value) && !isNaN(parseFloat(value))) {\r\n        return parseFloat(value);\r\n    } else if (typeof value == \"object\") {\r\n        // Iterate over keys, return parsed values\r\n        let obj = {};\r\n        Object.keys(value).forEach(key => {\r\n            obj[key] = parseAsNumber(value[key]);\r\n        })\r\n        return obj;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\n// TODO: Change requestAccessOnPageLoad back to false per default, it's true for debugging purposes\r\nconst defaultConstructorObject = {\r\n    baudRate: DEFAULT_BAUDRATE,\r\n    requestButton: null,\r\n    requestAccessOnPageLoad: true,\r\n    accessText: \"To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.\",\r\n    accessButtonLabel: \"Connect to Serial Port\",\r\n    styleDomElements: true,\r\n    transformer: new LineBreakTransformer(),\r\n    logIncomingSerialData: false,\r\n    logOutgoingSerialData: false,\r\n    parseStringsAsNumbers: true,\r\n    // TODO mention this new property in documentation\r\n    warnAboutUnregisteredEvents: true,\r\n    newLineCharacter: '\\n',\r\n    filters: []\r\n}\r\n\r\nexport default function connect(args) {\r\n    return SimpleSerial(args)\r\n}\r\n\r\nconst SimpleSerial = function(args) {\r\n    if (!navigator.serial) {\r\n        throw new Error(\"The Serial API not supported in your browser. Make sure you've enabled flags if necessary!\");\r\n    }\r\n\r\n    if (typeof args === \"number\") {\r\n        args = {\r\n            ...defaultConstructorObject,\r\n            baudRate: args\r\n        }\r\n    } else if (typeof args === \"undefined\") {\r\n        args = defaultConstructorObject;\r\n    } else if (typeof args === 'object') {\r\n        // TODO check for valid configuration object (transformer, HTML Element, ...)\r\n\r\n        // constructor object, override defaults\r\n        args = {\r\n            ...defaultConstructorObject,\r\n            ...args\r\n        }\r\n    }\r\n\r\n    if (args.requestButton != null) {\r\n        args = {\r\n            requestAccessOnPageLoad: false,\r\n            ...args\r\n        }\r\n    }\r\n\r\n    let configuration = args;\r\n\r\n    const instance = {\r\n        configuration,\r\n        port: null,\r\n        writer: null,\r\n        modal: null,\r\n        _listeners: {},\r\n        _this: this,\r\n\r\n        requestSerialAccessOnClick: function(element) {\r\n            if (typeof element === \"string\") {\r\n                // Search for HTML Element with this id\r\n                const el = document.getElementById(element)\r\n                if (!el) throw \"Could not find element with ID '\" + element + \"'.\"\r\n                element = el;\r\n            }\r\n            element.addEventListener(\"click\", instance.connect)\r\n        },\r\n\r\n        createModal() {\r\n            instance.modal = document.createElement(\"div\");\r\n            instance.configuration.styleDomElements ? instance.modal.setAttribute(\"style\", \"position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000\") : null;\r\n\r\n            const modalOverlay = document.createElement(\"div\");\r\n            instance.configuration.styleDomElements ? modalOverlay.setAttribute(\"style\", \"background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer\") : null;\r\n            modalOverlay.classList.add(\"SimpleSerial-modal-overlay\");\r\n\r\n            const modalContainer = document.createElement(\"div\");\r\n            instance.configuration.styleDomElements ? modalContainer.setAttribute(\"style\", \"position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box; \") : null;\r\n            modalContainer.classList.add(\"SimpleSerial-modal-container\");\r\n\r\n            const modalInner = document.createElement(\"div\");\r\n            instance.configuration.styleDomElements ? modalInner.setAttribute(\"style\", \"background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);\") : null;\r\n            modalInner.classList.add(\"SimpleSerial-modal-inner\");\r\n\r\n            const modalInnerText = document.createElement(\"p\");\r\n            instance.configuration.styleDomElements ? modalInnerText.setAttribute(\"style\", \"color: #000\") : null;\r\n            modalInnerText.innerText = instance.configuration.accessText;\r\n\r\n            const modalInnerButton = document.createElement(\"button\");\r\n            modalInnerButton.innerText = instance.configuration.accessButtonLabel;\r\n            instance.requestSerialAccessOnClick(modalInnerButton);\r\n\r\n            modalInner.append(modalInnerText, modalInnerButton);\r\n            modalContainer.append(modalInner);\r\n            instance.modal.append(modalOverlay, modalContainer);\r\n\r\n            document.body.append(instance.modal);\r\n            return instance.modal;\r\n        },\r\n\r\n        removeModal() {\r\n            instance.modal.remove();\r\n        },\r\n\r\n        connect: async function() {\r\n            instance.port = await navigator.serial.requestPort({ filters: instance.configuration.filters });\r\n            await instance.port.open({\r\n                baudRate: instance.configuration.baudRate\r\n            })\r\n            if (instance.configuration.requestAccessOnPageLoad) {\r\n                instance.removeModal();\r\n            }\r\n            const textEncoder = new TextEncoderStream();\r\n            const writableStreamClosed = textEncoder.readable.pipeTo(instance.port.writable);\r\n            instance.writer = textEncoder.writable.getWriter();\r\n            let decoder = new TextDecoderStream();\r\n            const readableStreamClosed = instance.port.readable.pipeTo(decoder.writable)\r\n            const inputStream = decoder.readable;\r\n            const reader = decoder.readable\r\n                .pipeThrough(new TransformStream(instance.configuration.transformer))\r\n                .getReader()\r\n            await instance.readLoop(reader);\r\n        },\r\n\r\n        on(name, callback) {\r\n            if (!instance._listeners[name]) {\r\n                instance._listeners[name] = [];\r\n            }\r\n            instance._listeners[name].push(callback);\r\n            return [name, callback];\r\n        },\r\n\r\n        removeListener(name, callbackToRemove) {\r\n            if (typeof name == \"object\" && typeof callbackToRemove == \"undefined\") {\r\n                callbackToRemove = name[1]\r\n                name = name[0];\r\n            }\r\n\r\n            if (!instance._listeners[name]) {\r\n                throw new Error('There is no listener named ' + name + '.')\r\n            }\r\n\r\n            let length = instance._listeners[name].length\r\n\r\n            instance._listeners[name] = instance._listeners[name].filter((listener) => listener !== callbackToRemove);\r\n            return length !== instance._listeners[name].length;\r\n        },\r\n\r\n        // Remove all listeners of event name\r\n        removeListeners(name) {\r\n            if (typeof name !== \"string\") {\r\n                throw new Error(\"removeListeners expects a string as parameter, which will be used to remove all listeners of that event.\");\r\n            }\r\n            const length = instance._listeners[name].length\r\n            instance._listeners[name] = [];\r\n            return length > 0;\r\n        },\r\n\r\n        async send(name, data) {\r\n            // If only 1 parameter is supplied, it's raw data.\r\n            if (typeof data === \"undefined\") {\r\n                if (instance.configuration.logOutgoingSerialData) {\r\n                    console.log(name);\r\n                }\r\n\r\n                if (instance.configuration.parseStringsAsNumbers) {\r\n                    name = parseAsNumber(name);\r\n                }\r\n\r\n                return instance.sendData(name);\r\n            }\r\n\r\n            // If data is an object, parse its keys as ints\r\n            if (instance.configuration.parseStringsAsNumbers) {\r\n                data = parseAsNumber(data);\r\n            }\r\n\r\n            const event = [name, data]\r\n            const stringified = JSON.stringify(event);\r\n            if (instance.configuration.logOutgoingSerialData) {\r\n                console.log(stringified);\r\n            }\r\n            return instance.writer.write(stringified + instance.configuration.newLineCharacter);\r\n        },\r\n\r\n        async sendEvent(name) {\r\n            return instance.send(\"_e\", name);\r\n        },\r\n\r\n        async sendData(data) {\r\n            return instance.send(\"_d\", data);\r\n        },\r\n\r\n        emit(name, data) {\r\n            if (instance.configuration.warnAboutUnregisteredEvents && !instance._listeners[name]) {\r\n                return console.warn('Event ' + name + ' has been received, but it has never been registered as listener.');\r\n            }\r\n            instance._listeners[name].forEach(callback => callback(data))\r\n        },\r\n\r\n        async readLoop(reader) {\r\n            while (true) {\r\n                const {value, done} = await reader.read();\r\n                if (value) {\r\n                    // TODO check and validate value as valid JSON\r\n                    let json = null;\r\n                    try {\r\n                        json = JSON.parse(value)\r\n                    } catch (e) {\r\n                        // console.error(e);\r\n                    }\r\n                    if (json) {\r\n                        if (instance.configuration.logIncomingSerialData) {\r\n                            console.log(json);\r\n                        }\r\n                        // If it's an array, handle accordingly\r\n                        if (typeof json == \"object\") {\r\n                            if (json[0] === \"_w\") {\r\n                                console.warn(\"[ARDUINO] \" + json[1]);\r\n                                continue;\r\n                            }\r\n\r\n                            if (json[0] === \"_l\") {\r\n                                console.log(\"[ARDUINO] \" + json[1]);\r\n                                continue;\r\n                            }\r\n\r\n                            if (json[0] === \"_e\") {\r\n                                console.error(\"[ARDUINO] \" + json[1]);\r\n                                continue;\r\n                            }\r\n\r\n                            // Reserved event name 'd': Data transfer. Register a listener \"data\" to listen to it.\r\n                            if (json[0] === \"_d\") {\r\n                                instance.emit('data', json[1]);\r\n                                continue;\r\n                            }\r\n\r\n                            instance.emit(json[0], json[1]);\r\n                        }\r\n\r\n                        // If it's just a string, just call the event\r\n                        else if (typeof json == \"string\") {\r\n                            instance.emit(json, null)\r\n                        }\r\n\r\n                    } else {\r\n                        if (instance.configuration.logIncomingSerialData) {\r\n                            console.log(value);\r\n                        }\r\n                    }\r\n                }\r\n                if (done) {\r\n                    console.log('[readLoop] DONE', done);\r\n                    reader.releaseLock();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If a button or an id was supplied, attach an event listener to it.\r\n    if (configuration.requestButton) {\r\n        instance.requestSerialAccessOnClick(configuration.requestButton);\r\n    }\r\n\r\n    // If the library should handle requesting access to the serial device, create a modal on page load.\r\n    if (configuration.requestAccessOnPageLoad) {\r\n        window.addEventListener(\"load\", instance.createModal());\r\n    }\r\n\r\n    return instance;\r\n}\r\n"],"names":["parseAsNumber","value","isNaN","parseFloat","obj","Object","keys","forEach","key","defaultConstructorObject","baudRate","requestButton","requestAccessOnPageLoad","accessText","accessButtonLabel","styleDomElements","transformer","constructor","chunks","transform","chunk","controller","lines","this","split","pop","line","enqueue","flush","logIncomingSerialData","logOutgoingSerialData","parseStringsAsNumbers","warnAboutUnregisteredEvents","newLineCharacter","filters","SimpleSerial","args","navigator","serial","Error","configuration","instance","port","writer","modal","_listeners","_this","requestSerialAccessOnClick","element","el","document","getElementById","addEventListener","connect","createModal","createElement","setAttribute","modalOverlay","classList","add","modalContainer","modalInner","modalInnerText","innerText","modalInnerButton","append","body","removeModal","remove","async","requestPort","open","textEncoder","TextEncoderStream","readable","pipeTo","writable","getWriter","decoder","TextDecoderStream","reader","pipeThrough","TransformStream","getReader","readLoop","on","name","callback","push","removeListener","callbackToRemove","length","filter","listener","removeListeners","data","console","log","sendData","event","stringified","JSON","stringify","write","send","emit","warn","done","read","json","parse","e","error","releaseLock","window"],"mappings":"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"}