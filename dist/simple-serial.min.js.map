{"version":3,"file":"simple-serial.min.js","sources":["../src/SimpleSerial.js"],"sourcesContent":["'use strict';\r\n\r\nconst DEFAULT_BAUDRATE = 57600;\r\n\r\n// Simple TransformStream used to chop incoming serial data up when a new line character appears.\r\nclass LineBreakTransformer {\r\n    constructor() {\r\n        this.chunks = \"\";\r\n    }\r\n\r\n    transform(chunk, controller) {\r\n        this.chunks += chunk;\r\n        const lines = this.chunks.split(\"\\r\\n\");\r\n        this.chunks = lines.pop();\r\n        lines.forEach((line) => controller.enqueue(line));\r\n    }\r\n\r\n    flush(controller) {\r\n        controller.enqueue(this.chunks);\r\n    }\r\n}\r\n\r\nfunction parseAsNumber(value) {\r\n    if (typeof value == \"number\") {\r\n        return value;\r\n    } else if (typeof value == \"string\" && !isNaN(value) && !isNaN(parseFloat(value))) {\r\n        return parseFloat(value);\r\n    } else if (typeof value == \"object\") {\r\n        // Iterate over keys, return parsed values\r\n        let obj = {};\r\n        Object.keys(value).forEach(key => {\r\n            obj[key] = parseAsNumber(value[key]);\r\n        })\r\n        return obj;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\n// TODO: Change requestAccessOnPageLoad back to false per default, it's true for debugging purposes\r\nconst defaultConstructorObject = {\r\n    baudRate: DEFAULT_BAUDRATE,\r\n    requestButton: null,\r\n    requestAccessOnPageLoad: true,\r\n    accessText: \"To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.\",\r\n    accessButtonLabel: \"Connect to Serial Port\",\r\n    styleDomElements: true,\r\n    transformer: new LineBreakTransformer(),\r\n    logIncomingSerialData: false,\r\n    logOutgoingSerialData: false,\r\n    parseStringsAsNumbers: true,\r\n    // TODO mention this new property in documentation\r\n    warnAboutUnregisteredEvents: true,\r\n    newLineCharacter: '\\n',\r\n    filters: []\r\n}\r\n\r\nexport default function connect(args) {\r\n    return new SimpleSerial(args)\r\n}\r\n\r\nexport class SimpleSerial {\r\n    configuration;\r\n    port;\r\n    writer;\r\n    modal;\r\n    _listeners = {};\r\n    _this = this;\r\n\r\n    constructor(args) {\r\n        if (!navigator.serial) {\r\n            throw new Error(\"The Serial API not supported in your browser. Make sure you've enabled flags if necessary!\");\r\n        }\r\n\r\n        if (typeof args === \"number\") {\r\n            args = {\r\n                ...defaultConstructorObject,\r\n                baudRate: args\r\n            }\r\n        } else if (typeof args === \"undefined\") {\r\n            args = defaultConstructorObject;\r\n        } else if (typeof args === 'object') {\r\n            // TODO check for valid configuration object (transformer, HTML Element, ...)\r\n\r\n            // constructor object, override defaults\r\n            args = {\r\n                ...defaultConstructorObject,\r\n                ...args\r\n            }\r\n        }\r\n\r\n        if (args.requestButton != null) {\r\n            args = {\r\n                requestAccessOnPageLoad: false,\r\n                ...args\r\n            }\r\n        }\r\n\r\n        this.configuration = args;\r\n\r\n        // If a button or an id was supplied, attach an event listener to it.\r\n        if (this.configuration.requestButton) {\r\n            this.requestSerialAccessOnClick(this.configuration.requestButton);\r\n        }\r\n\r\n        // If the library should handle requesting access to the serial device, create a modal on page load.\r\n        if (this.configuration.requestAccessOnPageLoad) {\r\n            window.addEventListener(\"load\", this.createModal.bind(this));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    requestSerialAccessOnClick(element) {\r\n        if (typeof element === \"string\") {\r\n            // Search for HTML Element with this id\r\n            const el = document.getElementById(element)\r\n            if (!el) throw \"Could not find element with ID '\" + element + \"'.\"\r\n            element = el;\r\n        }\r\n        element.addEventListener(\"click\", this.connect.bind(this))\r\n    }\r\n\r\n    createModal() {\r\n        this.modal = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? this.modal.setAttribute(\"style\", \"position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000\") : null;\r\n\r\n        const modalOverlay = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalOverlay.setAttribute(\"style\", \"background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer\") : null;\r\n        modalOverlay.classList.add(\"SimpleSerial-modal-overlay\");\r\n\r\n        const modalContainer = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalContainer.setAttribute(\"style\", \"position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box; \") : null;\r\n        modalContainer.classList.add(\"SimpleSerial-modal-container\");\r\n\r\n        const modalInner = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalInner.setAttribute(\"style\", \"background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);\") : null;\r\n        modalInner.classList.add(\"SimpleSerial-modal-inner\");\r\n\r\n        const modalInnerText = document.createElement(\"p\");\r\n        this.configuration.styleDomElements ? modalInnerText.setAttribute(\"style\", \"color: #000\") : null;\r\n        modalInnerText.innerText = this.configuration.accessText;\r\n\r\n        const modalInnerButton = document.createElement(\"button\");\r\n        modalInnerButton.innerText = this.configuration.accessButtonLabel;\r\n        this.requestSerialAccessOnClick(modalInnerButton);\r\n\r\n        modalInner.append(modalInnerText, modalInnerButton);\r\n        modalContainer.append(modalInner);\r\n        this.modal.append(modalOverlay, modalContainer);\r\n\r\n        document.body.append(this.modal);\r\n        return this.modal;\r\n    }\r\n\r\n    removeModal() {\r\n        this.modal.remove();\r\n    }\r\n\r\n    async connect() {\r\n        this.port = await navigator.serial.requestPort({ filters: this.configuration.filters });\r\n        await this.port.open({\r\n            baudRate: this.configuration.baudRate\r\n        })\r\n        if (this.configuration.requestAccessOnPageLoad) {\r\n            this.removeModal();\r\n        }\r\n        const textEncoder = new TextEncoderStream();\r\n        const writableStreamClosed = textEncoder.readable.pipeTo(this.port.writable);\r\n        this.writer = textEncoder.writable.getWriter();\r\n        let decoder = new TextDecoderStream();\r\n        const readableStreamClosed = this.port.readable.pipeTo(decoder.writable)\r\n        const inputStream = decoder.readable;\r\n        const reader = decoder.readable\r\n            .pipeThrough(new TransformStream(this.configuration.transformer))\r\n            .getReader()\r\n        await this.readLoop(reader);\r\n    }\r\n\r\n    on(name, callback) {\r\n        if (!this._listeners[name]) {\r\n            this._listeners[name] = [];\r\n        }\r\n        this._listeners[name].push(callback);\r\n        return [name, callback];\r\n    }\r\n\r\n    removeListener(name, callbackToRemove) {\r\n        if (typeof name == \"object\" && typeof callbackToRemove == \"undefined\") {\r\n            callbackToRemove = name[1]\r\n            name = name[0];\r\n        }\r\n\r\n        if (!this._listeners[name]) {\r\n            throw new Error('There is no listener named ' + name + '.')\r\n        }\r\n\r\n        let length = this._listeners[name].length\r\n\r\n        this._listeners[name] = this._listeners[name].filter((listener) => listener !== callbackToRemove);\r\n        return length !== this._listeners[name].length;\r\n    }\r\n\r\n    // Remove all listeners of event name\r\n    removeListeners(name) {\r\n        if (typeof name !== \"string\") {\r\n            throw new Error(\"removeListeners expects a string as parameter, which will be used to remove all listeners of that event.\");\r\n        }\r\n        const length = this._listeners[name].length\r\n        this._listeners[name] = [];\r\n        return length > 0;\r\n    }\r\n\r\n    async send(name, data) {\r\n        // If only 1 parameter is supplied, it's raw data.\r\n        if (typeof data === \"undefined\") {\r\n            if (this.configuration.logOutgoingSerialData) {\r\n                console.log(name);\r\n            }\r\n\r\n            if (this.configuration.parseStringsAsNumbers) {\r\n                name = parseAsNumber(name);\r\n            }\r\n\r\n            return this.sendData(name);\r\n        }\r\n\r\n        // If data is an object, parse its keys as ints\r\n        if (this.configuration.parseStringsAsNumbers) {\r\n            data = parseAsNumber(data);\r\n        }\r\n\r\n        const event = [name, data]\r\n        const stringified = JSON.stringify(event);\r\n        if (this.configuration.logOutgoingSerialData) {\r\n            console.log(stringified);\r\n        }\r\n        return this.writer.write(stringified + this.configuration.newLineCharacter);\r\n    }\r\n\r\n    async sendEvent(name) {\r\n        return this.send(\"_e\", name);\r\n    }\r\n\r\n    async sendData(data) {\r\n        return this.send(\"_d\", data);\r\n    }\r\n\r\n    emit(name, data) {\r\n        if (this.configuration.warnAboutUnregisteredEvents && !this._listeners[name]) {\r\n            return console.warn('Event ' + name + ' has been received, but it has never been registered as listener.');\r\n        }\r\n        this._listeners[name].forEach(callback => callback(data))\r\n    }\r\n\r\n    async readLoop(reader) {\r\n        while (true) {\r\n            const {value, done} = await reader.read();\r\n            if (value) {\r\n                // TODO check and validate value as valid JSON\r\n                let json = null;\r\n                try {\r\n                    json = JSON.parse(value)\r\n                } catch (e) {\r\n                    // console.error(e);\r\n                }\r\n                if (json) {\r\n                    if (this.configuration.logIncomingSerialData) {\r\n                        console.log(json);\r\n                    }\r\n                    // If it's an array, handle accordingly\r\n                    if (typeof json == \"object\") {\r\n                        if (json[0] === \"_w\") {\r\n                            console.warn(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        if (json[0] === \"_l\") {\r\n                            console.log(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        if (json[0] === \"_e\") {\r\n                            console.error(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        // Reserved event name 'd': Data transfer. Register a listener \"data\" to listen to it.\r\n                        if (json[0] === \"_d\") {\r\n                            this.emit('data', json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        this.emit(json[0], json[1]);\r\n                    }\r\n\r\n                    // If it's just a string, just call the event\r\n                    else if (typeof json == \"string\") {\r\n                        this.\r\n                        emit(json, null)\r\n                    }\r\n\r\n                } else {\r\n                    if (this.configuration.logIncomingSerialData) {\r\n                        console.log(value);\r\n                    }\r\n                }\r\n            }\r\n            if (done) {\r\n                console.log('[readLoop] DONE', done);\r\n                reader.releaseLock();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["parseAsNumber","value","isNaN","parseFloat","obj","Object","keys","forEach","key","defaultConstructorObject","baudRate","requestButton","requestAccessOnPageLoad","accessText","accessButtonLabel","styleDomElements","transformer","constructor","chunks","transform","chunk","controller","lines","this","split","pop","line","enqueue","flush","logIncomingSerialData","logOutgoingSerialData","parseStringsAsNumbers","warnAboutUnregisteredEvents","newLineCharacter","filters","SimpleSerial","args","navigator","serial","Error","configuration","requestSerialAccessOnClick","window","addEventListener","createModal","bind","element","el","document","getElementById","connect","modal","createElement","setAttribute","modalOverlay","classList","add","modalContainer","modalInner","modalInnerText","innerText","modalInnerButton","append","body","removeModal","remove","port","requestPort","open","textEncoder","TextEncoderStream","readable","pipeTo","writable","writer","getWriter","decoder","TextDecoderStream","reader","pipeThrough","TransformStream","getReader","readLoop","on","name","callback","_listeners","push","removeListener","callbackToRemove","length","filter","listener","removeListeners","data","console","log","sendData","event","stringified","JSON","stringify","write","send","emit","warn","done","read","json","parse","e","error","releaseLock"],"mappings":"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"}