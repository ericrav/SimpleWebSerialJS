{"version":3,"file":"simple-web-serial.min.js","sources":["../src/SimpleWebSerial.js"],"sourcesContent":["'use strict'\r\n\r\nconst DEFAULT_BAUDRATE = 57600\r\n\r\n// Simple TransformStream used to chop incoming serial data up when a new line character appears.\r\nclass LineBreakTransformer {\r\n    constructor() {\r\n        this.chunks = ''\r\n    }\r\n\r\n    transform(chunk, controller) {\r\n        try {\r\n            this.chunks += chunk\r\n            const lines = this.chunks.split('\\r\\n')\r\n            this.chunks = lines.pop()\r\n            lines.forEach(line => controller.enqueue(line))\r\n        } catch (error) {\r\n            console.error(`Transformation Error: ${error}`)\r\n        }\r\n    }\r\n\r\n    flush(controller) {\r\n        try {\r\n            controller.enqueue(this.chunks)\r\n        } catch (error) {\r\n            console.error(`Flushing Error: ${error}`)\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseAsNumber(value) {\r\n    if (typeof value === 'number') return value\r\n    if (typeof value === 'string' && !isNaN(value)) return parseFloat(value)\r\n    if (Array.isArray(value)) return value.map(item => parseAsNumber(item))\r\n    if (typeof value === 'object') return Object.keys(value).reduce((acc, key) => ({\r\n        ...acc,\r\n        [key]: parseAsNumber(value[key])\r\n    }), {})\r\n    return value\r\n}\r\n\r\nconst DEFAULT_CONSTRUCTOR_OBJECT = {\r\n    baudRate: DEFAULT_BAUDRATE,\r\n    requestButton: null,\r\n    requestAccessOnPageLoad: true,\r\n    accessText: 'To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.',\r\n    accessButtonLabel: 'Connect to Serial Port',\r\n    styleDomElements: true,\r\n    transformer: new LineBreakTransformer(),\r\n    logIncomingSerialData: false,\r\n    logOutgoingSerialData: false,\r\n    parseStringsAsNumbers: true,\r\n    warnAboutUnregisteredEvents: true,\r\n    newLineCharacter: '\\n',\r\n    filters: []\r\n}\r\n\r\nfunction createConnectionInstance(configuration) {\r\n    let port = null\r\n    let writer = null\r\n    let modalElement = null\r\n    let _listeners = {}\r\n\r\n    function requestSerialAccessOnClick(element) {\r\n        if (typeof element === 'string') {\r\n            // Search for HTML Element with this id\r\n            const el = document.getElementById(element)\r\n            if (!el) throw new Error('Could not find element with ID \\'' + element + '\\'.')\r\n            element = el\r\n        }\r\n        element.addEventListener('click', startConnection)\r\n    }\r\n\r\n    function createModal() {\r\n        const [modal, modalOverlay, modalContainer, modalInner, modalInnerText, modalInnerButton] =\r\n            ['div', 'div', 'div', 'div', 'p', 'button'].map(tag => document.createElement(tag))\r\n        modalContainer.classList.add('SimpleWebSerial-modal-container')\r\n        modalOverlay.classList.add('SimpleWebSerial-modal-overlay')\r\n        modalInner.classList.add('SimpleWebSerial-modal-inner')\r\n\r\n        if (configuration.styleDomElements) {\r\n            modal.setAttribute('style', 'position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000')\r\n            modalOverlay.setAttribute('style', 'background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer')\r\n            modalContainer.setAttribute('style', 'position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box;')\r\n            modalInner.setAttribute('style', 'background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);')\r\n            modalInnerText.setAttribute('style', 'color: #000')\r\n        }\r\n\r\n        modalInnerText.innerText = configuration.accessText\r\n\r\n        modalInnerButton.innerText = configuration.accessButtonLabel\r\n        requestSerialAccessOnClick(modalInnerButton)\r\n\r\n        modalInner.append(modalInnerText, modalInnerButton)\r\n        modalContainer.append(modalInner)\r\n        modal.append(modalOverlay, modalContainer)\r\n\r\n        modalElement = modal\r\n        document.body.append(modal)\r\n        return modal\r\n    }\r\n\r\n    function removeModal() {\r\n        modalElement?.remove()\r\n    }\r\n\r\n    async function startConnection() {\r\n        port = await navigator.serial.requestPort({ filters: configuration.filters })\r\n        await port.open({\r\n            baudRate: configuration.baudRate\r\n        })\r\n        if (configuration.requestAccessOnPageLoad) {\r\n            removeModal()\r\n        }\r\n        const textEncoder = new TextEncoderStream()\r\n        writer = textEncoder.writable.getWriter()\r\n        const decoder = new TextDecoderStream()\r\n        // TODO create methods to close the connection and release the port using these\r\n        /* eslint-disable no-unused-vars */\r\n        const writableStreamClosed = textEncoder.readable.pipeTo(port.writable)\r\n        const readableStreamClosed = port.readable.pipeTo(decoder.writable)\r\n        /* eslint-enable no-unused-vars */\r\n        const inputStream = decoder.readable\r\n        const reader = inputStream\r\n            .pipeThrough(new TransformStream(configuration.transformer))\r\n            .getReader()\r\n        readLoop(reader).then(response => {\r\n            console.log(response, 'readLoop done')\r\n        }).catch(e => {\r\n            console.error('Could not read serial data. Please make sure the same baud rate is used on device (Serial.begin()) and library. Library currently uses baud rate', configuration.baudRate, 'Please also make sure you\\'re not sending too much serial data. Consider using (a higher) delay() to throttle the amount of data sent.')\r\n            console.error(e)\r\n        })\r\n    }\r\n\r\n    function on(name, callback) {\r\n        if (!_listeners[name]) {\r\n            _listeners[name] = []\r\n        }\r\n        _listeners[name].push(callback)\r\n        return [name, callback]\r\n    }\r\n\r\n    function removeListener(name, callbackToRemove) {\r\n        if (typeof name === 'object' && typeof callbackToRemove === 'undefined') {\r\n            callbackToRemove = name[1]\r\n            name = name[0]\r\n        }\r\n\r\n        if (!_listeners[name]) {\r\n            throw new Error('There is no listener named ' + name + '.')\r\n        }\r\n\r\n        const length = _listeners[name].length\r\n\r\n        _listeners[name] = _listeners[name].filter((listener) => listener !== callbackToRemove)\r\n        return length !== _listeners[name].length\r\n    }\r\n\r\n    // Remove all listeners of event name\r\n    function removeListeners(name) {\r\n        if (typeof name !== 'string') {\r\n            throw new Error('removeListeners expects a string as parameter, which will be used to remove all listeners of that event.')\r\n        }\r\n        const length = _listeners[name].length\r\n        _listeners[name] = []\r\n        return length > 0\r\n    }\r\n\r\n    function ready() {\r\n        return port?.readable && port?.writable\r\n    }\r\n\r\n    function writable() {\r\n        return port?.writable\r\n    }\r\n\r\n    function readable() {\r\n        return port?.readable\r\n    }\r\n\r\n    async function send(name, data) {\r\n        console.log('send', port.writable)\r\n        if (!port?.writable) return\r\n\r\n        // If only 1 parameter is supplied, it's raw data.\r\n        if (typeof data === 'undefined') {\r\n            if (configuration.logOutgoingSerialData) {\r\n                console.log(name)\r\n            }\r\n\r\n            if (configuration.parseStringsAsNumbers) {\r\n                name = parseAsNumber(name)\r\n            }\r\n\r\n            return sendData(name)\r\n        }\r\n\r\n        // If data is an object, parse its keys as ints\r\n        if (configuration.parseStringsAsNumbers) {\r\n            data = parseAsNumber(data)\r\n        }\r\n\r\n        const event = [name, data]\r\n        const stringified = JSON.stringify(event)\r\n        if (configuration.logOutgoingSerialData) {\r\n            console.log(stringified)\r\n        }\r\n        console.log(writer.write)\r\n        return writer.write(stringified + configuration.newLineCharacter)\r\n    }\r\n\r\n    async function sendEvent(name) {\r\n        return send('_e', name)\r\n    }\r\n\r\n    async function sendData(data) {\r\n        return send('_d', data)\r\n    }\r\n\r\n    function emit(name, data) {\r\n        if (configuration.warnAboutUnregisteredEvents && !_listeners[name]) {\r\n            return console.warn('Event ' + name + ' has been received, but it has never been registered as listener.')\r\n        }\r\n        _listeners[name].forEach(callback => callback(data))\r\n    }\r\n\r\n    async function readLoop(reader) {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            const {value, done} = await reader.read()\r\n            if (value) {\r\n                let json = null\r\n                try {\r\n                    json = JSON.parse(value)\r\n                } catch {\r\n                    // Ignore bad reads\r\n                }\r\n                if (json) {\r\n                    if (configuration.logIncomingSerialData) {\r\n                        console.log(json)\r\n                    }\r\n                    // If it's an array, handle accordingly\r\n                    if (typeof json === 'object') {\r\n                        if (json[0] === '_w') {\r\n                            console.warn('[ARDUINO] ' + json[1])\r\n                            continue\r\n                        }\r\n\r\n                        if (json[0] === '_l') {\r\n                            console.log('[ARDUINO] ' + json[1])\r\n                            continue\r\n                        }\r\n\r\n                        if (json[0] === '_e') {\r\n                            console.error('[ARDUINO] ' + json[1])\r\n                            continue\r\n                        }\r\n\r\n                        // Reserved event name 'd': Data transfer. Register a listener \"data\" to listen to it.\r\n                        if (json[0] === '_d') {\r\n                            emit('data', json[1])\r\n                            continue\r\n                        }\r\n\r\n                        emit(json[0], json[1])\r\n                    }\r\n\r\n                    // If it's just a string, just call the event\r\n                    else if (typeof json === 'string') {\r\n                        emit(json, null)\r\n                    }\r\n                } else {\r\n                    if (configuration.logIncomingSerialData) {\r\n                        console.log(value)\r\n                    }\r\n                }\r\n            }\r\n            if (done) {\r\n                console.log('[readLoop] DONE', done)\r\n                reader.releaseLock()\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        createModal,\r\n        emit,\r\n        modalElement,\r\n        on,\r\n        port,\r\n        ready,\r\n        readable,\r\n        removeListener,\r\n        removeListeners,\r\n        requestSerialAccessOnClick,\r\n        send,\r\n        sendData,\r\n        sendEvent,\r\n        startConnection,\r\n        writable,\r\n        writer,\r\n    }\r\n}\r\n\r\n// setupSerialConnection()\r\n// SimpleWebSerial.setupSerialConnection\r\n// Return a connection instance\r\nexport const setupSerialConnection = function (args) {\r\n    if (!navigator.serial) {\r\n        throw new Error('The Serial API not supported in your browser. Make sure you\\'ve enabled flags if necessary!')\r\n    }\r\n\r\n    if (typeof args === 'number') {\r\n        args = {\r\n            ...DEFAULT_CONSTRUCTOR_OBJECT,\r\n            baudRate: args\r\n        }\r\n    } else if (typeof args === 'undefined') {\r\n        args = DEFAULT_CONSTRUCTOR_OBJECT\r\n    } else if (typeof args === 'object') {\r\n\r\n        // constructor object, override defaults\r\n        args = {\r\n            ...DEFAULT_CONSTRUCTOR_OBJECT,\r\n            ...args\r\n        }\r\n    }\r\n\r\n    if (args.requestButton != null) {\r\n        args = {\r\n            requestAccessOnPageLoad: false,\r\n            ...args\r\n        }\r\n    }\r\n\r\n    const configuration = args\r\n\r\n    const instance = createConnectionInstance(configuration)\r\n\r\n    // If a button or an id was supplied, attach an event listener to it.\r\n    if (configuration.requestButton) {\r\n        instance.requestSerialAccessOnClick(configuration.requestButton)\r\n    }\r\n\r\n    // If the library should handle requesting access to the serial device, create a modal on page load.\r\n    if (configuration.requestAccessOnPageLoad) {\r\n        window.addEventListener('load', instance.createModal)\r\n    }\r\n\r\n    return instance\r\n}\r\nexport default setupSerialConnection\r\n"],"names":["parseAsNumber","value","isNaN","Array","isArray","map","item","Object","keys","reduce","acc","key","parseFloat","DEFAULT_CONSTRUCTOR_OBJECT","baudRate","requestButton","requestAccessOnPageLoad","accessText","accessButtonLabel","styleDomElements","transformer","constructor","this","chunks","transform","chunk","controller","lines","split","pop","forEach","line","enqueue","error","console","flush","logIncomingSerialData","logOutgoingSerialData","parseStringsAsNumbers","warnAboutUnregisteredEvents","newLineCharacter","filters","createConnectionInstance","configuration","port","writer","modalElement","_listeners","requestSerialAccessOnClick","element","el","document","getElementById","Error","addEventListener","startConnection","async","navigator","serial","requestPort","open","remove","textEncoder","TextEncoderStream","writable","getWriter","decoder","TextDecoderStream","readable","pipeTo","reader","done","read","json","JSON","parse","log","warn","emit","releaseLock","readLoop","pipeThrough","TransformStream","getReader","then","response","catch","e","send","name","data","sendData","event","stringified","stringify","write","callback","createModal","modal","modalOverlay","modalContainer","modalInner","modalInnerText","modalInnerButton","tag","createElement","classList","add","setAttribute","innerText","append","body","on","push","ready","removeListener","callbackToRemove","length","filter","listener","removeListeners","sendEvent","args","instance","window"],"mappings":"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"}